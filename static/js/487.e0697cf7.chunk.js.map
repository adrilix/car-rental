{"version":3,"file":"static/js/487.e0697cf7.chunk.js","mappings":"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","sources":["HOC/WithOuthRedirect.jsx","components/Contact/ContactStyled.js","components/Contact/Contact.jsx","components/ContactForm/ContactFormStyled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","Page/ContactsPage.jsx"],"sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nconst WithOuthRedirect=(Component)=>{\n\n    const PrivatComponent = (props) =>{\n        const userData = useSelector((state)=>state.user.userData);\n        // const navigate=Navigate\n        return userData ? <Component {...props}/>\n        : <Navigate to='/login' replace={true}/>\n    };\n\n    return PrivatComponent;\n}\n\nexport default WithOuthRedirect\n","import styled from \"styled-components\"\n\nexport const ContactStyled = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const ContactDataStyled = styled.span`\n    width: 120px;\n`\n\nexport const ButtonDeleteStyled = styled.button`\n    font-size: 10px;\n    border: none;\n    outline: none;\n    border-radius: 6px;\n    padding: 4px;\n    text-transform: uppercase;\n    background: rgb(255 107 96);\n    color: #fff;\n\n  &:hover {\n    background: rgb(221 255 28);\n    color: #1ab188;\n    cursor: pointer;\n}\n`","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ContactStyled,\n    ContactDataStyled,\n    ButtonDeleteStyled\n} from './ContactStyled'\n\nconst Contact = ({ id, name, number, onDeleteContact }) => (\n    <ContactStyled>\n        <ContactDataStyled>{name}</ContactDataStyled>\n        <ContactDataStyled>{number}</ContactDataStyled>\n        <ButtonDeleteStyled onClick={()=>onDeleteContact(id)} type=\"button\">\n            видалити &times;\n        </ButtonDeleteStyled>\n    </ContactStyled>\n);\n\nContact.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n};\n\nexport default Contact;\n","import styled from \"styled-components\"\n\nexport const FormStyled = styled.form`\n        display: flex;\nflex-direction: column;\n`\nexport const LabelStyled = styled.label`\nmargin-bottom: 7px;\nfont-weight: bold;\n`\n\nexport const InputStyled = styled.input`\nmargin-bottom: 7px;\npadding: 2px 7px;\n\nheight: 30px;\nborder-style: none;\nbox-shadow: 6px 6px 12px rgba(0, 0, 0, 0.1);`\n\nexport const ButtonAddContactStyled = styled.button`\nwidth: 250px;\nheight: 30px;\n\n  padding: 7px;\n  margin: 10px;\n \n  border: none;\n  color: black;\n  font-weight: bold;\n  cursor: pointer;\n\n   border-radius: 5px;\n   background: #DEB887;\n  box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.1);\n\n  &:hover {\n    font-size: 15px;\n  }\n\n  &:active {\n    background: #D2B48C;\n     box-shadow: inset 6px 6px 12px rgba(0, 0, 0, 0.1);\n  }\n  `\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    FormStyled,\n    LabelStyled,\n    ButtonAddContactStyled,\n    InputStyled,\n} from './ContactFormStyled';\nimport { useDispatch } from 'react-redux';\nimport { addContactThunk } from 'redux/contactsReducers/contactsThunks';\n\nfunction ContactForm(contacts) {\n\n    const dispatch = useDispatch();\n    const contactsUnpack = contacts.contacts;    \n\n    const haldleSubmit = event => {\n        event.preventDefault();\n        const formData = {\n            name: event.currentTarget.elements.name.value,\n            number: event.currentTarget.elements.number.value,\n        };\n        const findName = contactsUnpack.some(\n            el => el.name.toLowerCase() === formData.name.toLowerCase()\n        );\n        findName\n            ? alert(`Контакт ${formData.name} вже існує в телефонній книзі`)\n            : dispatch(addContactThunk(formData));\n        event.currentTarget.reset();\n    };\n    return (\n        <FormStyled onSubmit={haldleSubmit}>\n            <h2>Додай контакт</h2>\n            <LabelStyled>\n                <br />\n                <b>Name</b>\n                <InputStyled\n                    autoComplete=\"clear on escape\"\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Ba\"\n                    required\n                />\n            </LabelStyled>\n\n            <LabelStyled>\n                <br />\n                <b>Number</b>\n                <InputStyled\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </LabelStyled>\n\n            <ButtonAddContactStyled type=\"submit\">\n                додай контакт\n            </ButtonAddContactStyled>\n        </FormStyled>\n    );\n}\n\nContactForm.propTypes = {\n    contacts: PropTypes.arrayOf(\n            PropTypes.shape\n            // ({\n            //     id: PropTypes.string.isRequired,\n            //     name: PropTypes.string.isRequired,\n            //     number: PropTypes.string.isRequired,\n            // })\n        ).isRequired,\n    };\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Filter = ({ value, onChange }) => {\n    return (\n        <>\n            <div>\n                {/* <h2>телефонна книга :</h2> */}\n                <label>\n                    <span>знайди контакт за ім'ям тут</span>  \n                    <input onChange={onChange} type=\"text\" name=\"name\" value={value}/>\n                </label>\n            </div>\n\n        </>\n    );\n};\n\nFilter.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string,\n};\n\nexport default Filter;\n","import WithOuthRedirect from 'HOC/WithOuthRedirect';\nimport Contact from 'components/Contact/Contact';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nimport { LoaderSpinner } from 'components/Loader/Loader';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findContacts } from 'redux/contactsReducers/contactsSlice';\nimport { deleteContactThunk, fetchContactsThunk } from 'redux/contactsReducers/contactsThunks';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const userData = useSelector(state => state.user.userData);\n\n  const contacts = useSelector(state => state.phonebook.contacts);\n  const isLoading = useSelector(state => state.phonebook.isLoading);\n  const error = useSelector(state => state.phonebook.error);\n  const filter = useSelector(state => state.phonebook.filter);\n\n  useEffect(() => {\n    if (!userData) return;\n    dispatch(fetchContactsThunk());\n  }, [dispatch, userData]);\n\n  const getFindedContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    return filteredContacts;\n  };\n\n  const changeFilter = event => {\n    dispatch(findContacts(event.target.value))\n  };\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n  const showEmptyContactsMessage =\n    Array.isArray(contacts) && contacts.length === 0 && !isLoading;\n\n  return (\n    <div>\n      {showEmptyContactsMessage ? (\n        <p>поки що немає збережених контактів</p>\n      ) : (\n        <p>Список збережених контактів :</p>\n      )}\n      <ContactForm contacts={contacts}></ContactForm>\n\n      <Filter value={filter} onChange={changeFilter} />\n      <ul>\n        {showContacts &&\n          getFindedContacts().map(({ name, number, id }) => {\n            return (\n              <li key={id}>\n                <Contact\n                  onDeleteContact={handleDeleteContact}\n                  name={name}\n                  number={number}\n                  id={id}\n                ></Contact>\n              </li>\n            );\n          })}\n      </ul>\n      {isLoading && <LoaderSpinner />}\n      {error && <p> {error} </p>}\n    </div>\n  );\n};\n\nexport default WithOuthRedirect(ContactsPage);\n"],"names":["Component","props","useSelector","state","user","userData","_jsx","_objectSpread","Navigate","to","replace","ContactStyled","styled","_templateObject","_taggedTemplateLiteral","ContactDataStyled","_templateObject2","ButtonDeleteStyled","_templateObject3","_ref","id","name","number","onDeleteContact","_jsxs","children","onClick","type","FormStyled","LabelStyled","InputStyled","ButtonAddContactStyled","_templateObject4","contacts","dispatch","useDispatch","contactsUnpack","onSubmit","event","preventDefault","formData","currentTarget","elements","value","some","el","toLowerCase","alert","concat","addContactThunk","reset","autoComplete","pattern","title","required","onChange","_Fragment","WithOuthRedirect","phonebook","isLoading","error","filter","useEffect","fetchContactsThunk","handleDeleteContact","contactId","deleteContactThunk","showContacts","Array","isArray","length","showEmptyContactsMessage","ContactForm","Filter","findContacts","target","normalizedFilter","contact","includes","getFindedContacts","map","Contact","LoaderSpinner"],"sourceRoot":""}